'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _core = require('@emotion/core');

var _react = require('react');

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _utils = require('@appbaseio/reactivesearch/lib/utils');

var _MapPin = require('./addons/styles/MapPin');

var _ReactiveMap = require('./ReactiveMap');

var _ReactiveMap2 = _interopRequireDefault(_ReactiveMap);

var _utils2 = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return 'You have tried to stringify object returned from `css` function. It isn\'t supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).'; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /** @jsx jsx */


var OpenStreetMap = void 0;
var OpenStreetLayer = void 0;
var OpenStreetMaker = void 0;
var OpenStreetPopup = void 0;
var Icon = void 0;
var DivIcon = void 0;

var _ref2 = process.env.NODE_ENV === 'production' ? {
	name: 'jpma72-html',
	styles: 'height:auto;;label:html;'
} : {
	name: 'jpma72-html',
	styles: 'height:auto;;label:html;',
	map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
	toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 = process.env.NODE_ENV === 'production' ? {
	name: '1nqe0go-html',
	styles: 'position:absolute;left:0;width:0;height:0;border-top:12px solid white;border-right:12px solid transparent;box-shadow:0 2px 4px 0 rgba(0,0,0,0.15);;label:html;'
} : {
	name: '1nqe0go-html',
	styles: 'position:absolute;left:0;width:0;height:0;border-top:12px solid white;border-right:12px solid transparent;box-shadow:0 2px 4px 0 rgba(0,0,0,0.15);;label:html;',
	map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
	toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = process.env.NODE_ENV === 'production' ? {
	name: 'tt6a2c-ReactiveOpenStreetMap',
	styles: '.leaflet-div-icon{width:auto !important;border:0;}.leaflet-popup-content-wrapper{border-radius:3px !important;};label:ReactiveOpenStreetMap;'
} : {
	name: 'tt6a2c-ReactiveOpenStreetMap',
	styles: '.leaflet-div-icon{width:auto !important;border:0;}.leaflet-popup-content-wrapper{border-radius:3px !important;};label:ReactiveOpenStreetMap;',
	map: '/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */',
	toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var ReactiveOpenStreetMap = function (_Component) {
	_inherits(ReactiveOpenStreetMap, _Component);

	function ReactiveOpenStreetMap(props) {
		_classCallCheck(this, ReactiveOpenStreetMap);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_this.triggerAnalytics = function (searchPosition) {
			// click analytics would only work client side and after javascript loads
			var _this$props = _this.props,
			    config = _this$props.config,
			    analytics = _this$props.analytics,
			    headers = _this$props.headers;


			(0, _utils2.triggerClickAnalytics)({
				config: config,
				headers: headers,
				analytics: analytics,
				searchPosition: searchPosition + 1,
				context: _this.context
			});
		};

		_this.getMarkers = function (_ref) {
			var showMarkers = _ref.showMarkers,
			    renderData = _ref.renderData,
			    defaultPin = _ref.defaultPin,
			    onPopoverClick = _ref.onPopoverClick,
			    resultsToRender = _ref.resultsToRender,
			    getPosition = _ref.getPosition;

			if (showMarkers) {
				var markers = resultsToRender.map(function (item, index) {
					var position = getPosition(item);
					var openStreetMarkerProps = {
						riseOnHover: true,
						onClick: function onClick() {
							return _this.triggerAnalytics(index);
						}
					};

					var openStreetPopupPorops = {
						css: {
							'.leaflet-popup-content-wrapper': {
								borderRadius: '3px !important'
							}
						}
					};

					if (renderData) {
						var data = renderData(item);

						if ('label' in data) {
							openStreetMarkerProps.icon = new DivIcon({
								html: _server2.default.renderToStaticMarkup((0, _core.jsx)(
									'div',
									{ css: _MapPin.mapPinWrapper },
									(0, _core.jsx)(
										_MapPin.MapPin,
										{ css: _ref2 },
										data.label
									),
									(0, _core.jsx)('div', {
										css: _ref3
									}),
									onPopoverClick ? (0, _core.jsx)(
										OpenStreetPopup,
										openStreetPopupPorops,
										onPopoverClick(item)
									) : null
								))
							});
							return (0, _core.jsx)(
								OpenStreetMaker,
								_extends({
									key: item._id,
									position: [position.lat, position.lng]
								}, openStreetMarkerProps),
								onPopoverClick ? (0, _core.jsx)(
									OpenStreetPopup,
									openStreetPopupPorops,
									onPopoverClick(item)
								) : null
							);
						} else if ('icon' in data) {
							openStreetMarkerProps.icon = new Icon({
								iconUrl: data.icon
							});
							return (0, _core.jsx)(
								OpenStreetMaker,
								_extends({
									key: item._id,
									position: [position.lat, position.lng]
								}, openStreetMarkerProps),
								onPopoverClick ? (0, _core.jsx)(
									OpenStreetPopup,
									openStreetPopupPorops,
									onPopoverClick(item)
								) : null
							);
						}
						openStreetMarkerProps.icon = new DivIcon({
							html: _server2.default.renderToStaticMarkup(data.custom)
						});
						return (0, _core.jsx)(
							OpenStreetMaker,
							_extends({
								key: item._id,
								position: [position.lat, position.lng]
							}, openStreetMarkerProps),
							onPopoverClick ? (0, _core.jsx)(
								OpenStreetPopup,
								openStreetPopupPorops,
								onPopoverClick(item)
							) : null
						);
					} else if (defaultPin) {
						openStreetMarkerProps.icon = new Icon({
							iconUrl: defaultPin
						});
					}
					return (0, _core.jsx)(
						OpenStreetMaker,
						_extends({
							key: item._id,
							position: [position.lat, position.lng]
						}, openStreetMarkerProps),
						onPopoverClick ? (0, _core.jsx)(
							OpenStreetPopup,
							openStreetPopupPorops,
							onPopoverClick(item)
						) : null
					);
				});

				return markers;
			}
			return null;
		};

		_this.renderMap = function (params) {
			// we check for `OpenStreetMap` here instead of `window`
			// because leaflet and react-leaflet are incompatible with SSR setup
			// hence the leaflet modules are imported on mount and the component
			// is force-rendered to avail the map module
			if (typeof OpenStreetMap === 'undefined') return null;
			var markers = _this.getMarkers(params);

			var style = {
				width: '100%',
				height: '100%',
				position: 'relative'
			};

			return (0, _core.jsx)(
				OpenStreetMap,
				{
					style: style,
					zoom: params.zoom,
					center: [params.center.lat, params.center.lng],
					viewport: {},
					css: _ref4,
					touchZoom: true,
					ref: function ref(elem) {
						if (!_this.state.mapRef) {
							_this.setState({
								mapRef: elem.leafletElement
							});
						}
					},
					onZoomEnd: params.handleZoomChange,
					onDragend: params.handleOnDragEnd
				},
				(0, _core.jsx)(OpenStreetLayer, {
					url: _this.props.tileServer || 'https://{s}.tile.osm.org/{z}/{x}/{y}.png'
				}),
				markers,
				_this.props.showMarkers && _this.props.markers,
				params.renderSearchAsMove()
			);
		};

		_this.state = {
			mapRef: null
		};
		return _this;
	}

	ReactiveOpenStreetMap.prototype.componentDidMount = function componentDidMount() {
		/* eslint-disable */
		OpenStreetMap = require('react-leaflet').Map;
		OpenStreetLayer = require('react-leaflet').TileLayer;
		OpenStreetMaker = require('react-leaflet').Marker;
		OpenStreetPopup = require('react-leaflet').Popup;
		Icon = require('leaflet').Icon;
		DivIcon = require('leaflet').DivIcon;
		this.forceUpdate();
	};

	ReactiveOpenStreetMap.prototype.render = function render() {
		return (0, _core.jsx)(_ReactiveMap2.default, _extends({}, this.props, {
			renderMap: this.renderMap,
			mapRef: this.state.mapRef,
			mapService: _ReactiveMap.MAP_SERVICES.OPEN_STREET_MAP
		}));
	};

	return ReactiveOpenStreetMap;
}(_react.Component);

ReactiveOpenStreetMap.contextType = _utils.ReactReduxContext;


ReactiveOpenStreetMap.propTypes = {
	autoCenter: _types2.default.bool,
	autoClosePopover: _types2.default.bool,
	center: _types2.default.location,
	className: _types2.default.string,
	componentId: _types2.default.stringRequired,
	dataField: _types2.default.stringRequired,
	defaultCenter: _types2.default.location,
	defaultZoom: _types2.default.number,
	defaultRadius: _types2.default.number,
	defaultPin: _types2.default.string,
	innerClass: _types2.default.style,
	markers: _types2.default.children,
	tileServer: _types2.default.string,
	title: _types2.default.string,
	onError: _types2.default.func,
	onPopoverClick: _types2.default.func,
	onData: _types2.default.func,
	renderError: _types2.default.title,
	react: _types2.default.react,
	renderData: _types2.default.func,
	renderAllData: _types2.default.func,
	size: _types2.default.number,
	sortBy: _types2.default.sortBy,
	stream: _types2.default.bool,
	streamAutoCenter: _types2.default.bool,
	showMarkers: _types2.default.bool,
	style: _types2.default.style,
	unit: _types2.default.string,
	config: _types2.default.props,
	analytics: _types2.default.props,
	headers: _types2.default.headers
};

ReactiveOpenStreetMap.defaultProps = {
	size: 10,
	style: {},
	className: null,
	pages: 5,
	pagination: false,
	autoCenter: false,
	streamAutoCenter: false,
	defaultZoom: 8,
	mapProps: {},
	markerProps: {},
	markers: null,
	showMapStyles: false,
	showSearchAsMove: true,
	searchAsMove: false,
	showMarkers: true,
	showMarkerClusters: true,
	unit: 'mi',
	defaultRadius: 100
};

var mapStateToProps = function mapStateToProps(state) {
	return {
		config: state.config,
		headers: state.appbaseRef.headers,
		analytics: state.analytics
	};
};

exports.default = (0, _utils.connect)(mapStateToProps, null)(ReactiveOpenStreetMap);